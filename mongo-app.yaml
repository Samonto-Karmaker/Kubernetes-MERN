# This file defines a Kubernetes Deployment and a Service for a MongoDB application.

# Deployment Section
apiVersion: apps/v1 # Specifies the API version for Deployment.
kind: Deployment # Specifies the kind of Kubernetes object you're creating.
metadata:
  name: mongo-app # The name of the Deployment. This name will be used to reference the Deployment.
spec:
  replicas: 1 # Specifies the number of pod replicas you want running.
  selector:
    matchLabels:
      app: mongo-app # Selector that determines which pods are part of this Deployment.
  template: # Template for the pods the controller should create.
    metadata:
      labels:
        app: mongo-app # Labels applied to all pods created from this template.
    spec:
      containers:
      - name: mongo-app # Name of the container within the pod.
        image: mongo:latest # The Docker image to use for the container.
        ports:
        - containerPort: 27017 # The port the container exposes.
        env: # Environment variables to set in the container.
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              secretKeyRef:
                name: mongo-secret # References the Kubernetes Secret named mongo-secret.
                key: username # The key within the secret containing the username.
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongo-secret # References the Kubernetes Secret named mongo-secret.
                key: password # The key within the secret containing the password.

# Service Section
---
apiVersion: v1 # Specifies the API version for Service.
kind: Service # Specifies the kind of Kubernetes object you're creating.
metadata:
  name: mongo-service # The name of the Service. This name will be used to reference the Service.
spec:
  selector:
    app: mongo-app # Selector that determines which pods are part of this Service. Must match the labels in the Deployment.
  ports:
    - protocol: TCP
      port: 27017 # The port that the service exposes.
      targetPort: 27017 # The target port on the pod to forward traffic to.

# In a real-world project, consider the following:
# 1. Image Version: Instead of using the 'latest' tag for the MongoDB image, 
# specify a fixed version to ensure consistency and prevent unexpected changes.

# 2. Resource Limits: Define CPU and memory limits and requests for the container to ensure 
# efficient resource usage and prevent resource starvation.

# 3. Persistence: Use PersistentVolumes (PV) and PersistentVolumeClaims (PVC) to ensure data persistence across pod restarts and deployments.
# 4. Security: Implement network policies to control the traffic flow to and from the MongoDB pods for enhanced security.
# 5. Monitoring and Logging: Integrate monitoring and logging solutions to keep track of the MongoDB deployment's health and performance.

# 6. Secret Management: Ensure that the 'mongo-secret' Kubernetes Secret is securely created and managed. 
# Avoid hardcoding sensitive information in your YAML files.

# 7. Service Type: Depending on your cluster environment and access needs, 
# consider changing the Service type from the default (ClusterIP) to NodePort or LoadBalancer for external access.