# If the secret is associated with a particular with let's say mongodb
# then the name of the secret should be mongodb-secret.yaml

# It is advisable to have separate secret.yaml for each service
# This will help in managing the secrets easily

# As it is an example, we are using a single secret.yaml file
# In real-world scenarios, you should have separate secret.yaml for each service

# This type of file should not be committed to the version control system. Use .gitignore to ignore this file in real-world scenarios

# ========================================================================================================

# Kubernetes Secrets are objects that let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys.
# Storing confidential information in Secrets is safer and more flexible than putting it directly into
# the pod definition or in a container image.

# Usage of Secrets:
# - Secrets can be mounted as data volumes or be exposed as environment variables to be used by a container in a pod.
# - Secrets can also be used by other parts of the system, without being directly exposed to the pod. 
# For example, they can hold credentials that the system needs to interact with external systems on your behalf.

# In this file, we define a Secret named `mongo-secret` that stores credentials for accessing a MongoDB database.

apiVersion: v1 # API version
kind: Secret # Type of Kubernetes object
metadata:
  name: mongo-secret # Name of the secret object
type: Opaque # The type 'Opaque' indicates that the secret contains arbitrary key-value pairs.

# The `data` field contains the actual secrets. Each key-value pair in the `data` field represents a secret.
# The key is the name of the secret, and the value is the secret data, encoded in base64.
# This encoding does not provide encryption or security, but ensures that the secret data can be safely stored and transmitted as plain text.
data:
  username: bXkgbW9uZ28gYXBw # 'my mongodb app' encoded in base64
  password: bXkgbW9uZ28gcGFzc3dvcmQ= # 'my mongodb password' encoded in base64

# Things to keep in mind when working with Secrets in a real-world Kubernetes project:
# 1. Secret Management: Avoid hard-coding secrets in your application code. 
# Use Kubernetes Secrets to inject sensitive data into your applications securely.
# 2. Access Control: Use Kubernetes RBAC (Role-Based Access Control) to restrict who can access the Secrets. 
# Ensure that only the pods and users that need access to a Secret can obtain it.
# 3. Secret Encoding: Remember that the base64 encoding of Secrets is not an encryption method. 
# Anyone who can access the Secret can decode it. Consider using additional measures to encrypt sensitive data at rest.
# 4. Secret Size: There is a size limit for Secrets, so they are not suitable for storing large files such as SSL certificates.
# For large files, consider using Kubernetes ConfigMaps or external secret management tools.
# 5. Secret Rotation: Plan for how you will rotate Secrets that need to be changed.
# This may involve updating the Secret and ensuring that applications are restarted to pick up the new Secret.
# 6. Avoid Exposing Secrets: Be cautious about logging and error messages.
# Ensure that the secret data is not accidentally logged or exposed through application errors.
# 7. Use Namespaces: Organize Secrets using Kubernetes namespaces.
# This helps in managing Secrets across different environments (development, staging, production) and applications.
# 8. Third-Party Tools: For more complex secret management needs, consider using third-party tools like HashiCorp Vault,
# which integrate with Kubernetes and provide additional features such as dynamic secrets and fine-grained access control.